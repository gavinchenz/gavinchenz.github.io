(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{379:function(t,i,a){"use strict";a.r(i);var r=a(10),v=Object(r.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"目录"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),i("p"),i("div",{staticClass:"table-of-contents"},[i("ul",[i("li",[i("a",{attrs:{href:"#git-忽略提交-gitignore-查看原文-https-www-jianshu-com-p-74bd0ceb6182"}},[t._v("Git 忽略提交 .gitignore 查看原文")])]),i("li",[i("a",{attrs:{href:"#配置语法"}},[t._v("配置语法")])]),i("li",[i("a",{attrs:{href:"#git-忽略文件提交的方法"}},[t._v("Git 忽略文件提交的方法")]),i("ul",[i("li",[i("a",{attrs:{href:"#在-git-项目中定义-gitignore-文件"}},[t._v("在 Git 项目中定义 .gitignore 文件")])]),i("li",[i("a",{attrs:{href:"#在-git-项目的设置中指定排除文件"}},[t._v("在 Git 项目的设置中指定排除文件")])]),i("li",[i("a",{attrs:{href:"#定义-git-全局的-gitignore-文件"}},[t._v("定义 Git 全局的 .gitignore 文件")])])])]),i("li",[i("a",{attrs:{href:"#git-忽略规则"}},[t._v("Git 忽略规则")])]),i("li",[i("a",{attrs:{href:"#git-忽略规则优先级"}},[t._v("Git 忽略规则优先级")])]),i("li",[i("a",{attrs:{href:"#git-忽略规则匹配语法"}},[t._v("Git 忽略规则匹配语法")])]),i("li",[i("a",{attrs:{href:"#常用匹配示例"}},[t._v("常用匹配示例")])]),i("li",[i("a",{attrs:{href:"#gitignore规则不生效"}},[t._v(".gitignore规则不生效")])])])]),i("p"),t._v(" "),i("h2",{attrs:{id:"git-忽略提交-gitignore-查看原文"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-忽略提交-gitignore-查看原文"}},[t._v("#")]),t._v(" Git 忽略提交 .gitignore "),i("a",{attrs:{href:"https://www.jianshu.com/p/74bd0ceb6182",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看原文"),i("OutboundLink")],1)]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",[t._v("规则")]),t._v(" "),i("th",[t._v("作用")])])]),t._v(" "),i("tbody",[i("tr",[i("td",[t._v("/mtk")]),t._v(" "),i("td",[t._v("过滤整个文件夹")])]),t._v(" "),i("tr",[i("td",[t._v("*.zip")]),t._v(" "),i("td",[t._v("过滤所有.zip文件")])]),t._v(" "),i("tr",[i("td",[t._v("/mtk/do.c")]),t._v(" "),i("td",[t._v("过滤某个具体文件")])]),t._v(" "),i("tr",[i("td",[t._v("!/mtk/one.txt")]),t._v(" "),i("td",[t._v("追踪（不过滤）某个具体文件")])])])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),i("p",[t._v("注意：如果你创建 .gitignore 文件之前就 push 了某一文件，那么即使你在 .gitignore 文件中写入过滤该文件的规则，该规则也不会起作用，git仍然会对该文件进行版本管理。")])]),t._v(" "),i("h2",{attrs:{id:"配置语法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#配置语法"}},[t._v("#")]),t._v(" 配置语法")]),t._v(" "),i("ul",[i("li",[t._v("以斜杠 “/” 开头表示目录;")]),t._v(" "),i("li",[t._v("以星号 “*” 通配多个字符;")]),t._v(" "),i("li",[t._v("以问号 “?” 通配单个字符;")]),t._v(" "),i("li",[t._v("以方括号 “[ ]” 包含单个字符的匹配列表;")]),t._v(" "),i("li",[t._v("以叹号 “!” 表示不忽略(跟踪)匹配到的文件或目录。")])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),i("p",[t._v("注意： git 对于 .gitignore 配置文件是按行从上到下进行规则匹配的")])]),t._v(" "),i("h2",{attrs:{id:"git-忽略文件提交的方法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-忽略文件提交的方法"}},[t._v("#")]),t._v(" Git 忽略文件提交的方法")]),t._v(" "),i("p",[t._v("有三种方法可以实现忽略Git中不想提交的文件。")]),t._v(" "),i("h3",{attrs:{id:"在-git-项目中定义-gitignore-文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#在-git-项目中定义-gitignore-文件"}},[t._v("#")]),t._v(" 在 Git 项目中定义 .gitignore 文件")]),t._v(" "),i("p",[t._v("这种方式通过在项目的某个文件夹下定义 .gitignore 文件，在该文件中定义相应的忽略规则，来管理当前文件夹下的文件的Git提交行为。")]),t._v(" "),i("p",[t._v(".gitignore 文件是可以提交到共有仓库中，这就为该项目下的所有开发者都共享一套定义好的忽略规则。")]),t._v(" "),i("p",[t._v("在 .gitingore 文件中，遵循相应的语法，在每一行指定一个忽略规则。如：")]),t._v(" "),i("div",{staticClass:"language-sh extra-class"},[i("pre",{pre:!0,attrs:{class:"language-sh"}},[i("code",[t._v("*.log\n*.temp\n/vendor\n")])])]),i("h3",{attrs:{id:"在-git-项目的设置中指定排除文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#在-git-项目的设置中指定排除文件"}},[t._v("#")]),t._v(" 在 Git 项目的设置中指定排除文件")]),t._v(" "),i("p",[t._v("这种方式只是临时指定该项目的行为，需要编辑当前项目下的 .git/info/exclude 文件，然后将需要忽略提交的文件写入其中。")]),t._v(" "),i("p",[t._v("需要注意的是，这种方式指定的忽略文件的根目录是项目根目录。")]),t._v(" "),i("h3",{attrs:{id:"定义-git-全局的-gitignore-文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#定义-git-全局的-gitignore-文件"}},[t._v("#")]),t._v(" 定义 Git 全局的 .gitignore 文件")]),t._v(" "),i("p",[t._v("除了可以在项目中定义 .gitignore 文件外，还可以设置全局的 git .gitignore 文件来管理所有Git项目的行为。这种方式在不同的项目开发者之间是不共享的，是属于项目之上Git应用级别的行为。")]),t._v(" "),i("p",[t._v("这种方式也需要创建相应的 .gitignore 文件，可以放在任意位置。然后在使用以下命令配置 Git：")]),t._v(" "),i("div",{staticClass:"language-sh extra-class"},[i("pre",{pre:!0,attrs:{class:"language-sh"}},[i("code",[i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),i("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.excludesfile ~/.gitignore\n")])])]),i("h2",{attrs:{id:"git-忽略规则"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-忽略规则"}},[t._v("#")]),t._v(" Git 忽略规则")]),t._v(" "),i("p",[t._v("详细的忽略规则可以参考"),i("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方英文文档"),i("OutboundLink")],1)]),t._v(" "),i("h2",{attrs:{id:"git-忽略规则优先级"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-忽略规则优先级"}},[t._v("#")]),t._v(" Git 忽略规则优先级")]),t._v(" "),i("p",[t._v("在 .gitingore 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：")]),t._v(" "),i("ul",[i("li",[t._v("从命令行中读取可用的忽略规则")]),t._v(" "),i("li",[t._v("当前目录定义的规则")]),t._v(" "),i("li",[t._v("父级目录定义的规则，依次地推")]),t._v(" "),i("li",[t._v("$GIT_DIR/info/exclude 文件中定义的规则")]),t._v(" "),i("li",[t._v("core.excludesfile中定义的全局规则")])]),t._v(" "),i("h2",{attrs:{id:"git-忽略规则匹配语法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-忽略规则匹配语法"}},[t._v("#")]),t._v(" Git 忽略规则匹配语法")]),t._v(" "),i("p",[t._v("在 .gitignore 文件中，每一行的忽略规则的语法如下：")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("空格")]),t._v(" 不匹配任意文件，可作为分隔符，可用反斜杠转义")]),t._v(" "),i("li",[i("code",[t._v("# 开头")]),t._v("的模式标识注释，可以使用反斜杠进行转义")]),t._v(" "),i("li",[i("code",[t._v("! 开头")]),t._v("的模式标识否定，该文件将会再次被包含， "),i("em",[i("strong",[t._v("如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。")])]),t._v(" 可以使用反斜杠进行转义")]),t._v(" "),i("li",[i("code",[t._v("/ 结束")]),t._v("的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件")]),t._v(" "),i("li",[i("code",[t._v("/ 开始")]),t._v("的模式匹配项目跟目录")]),t._v(" "),i("li",[t._v("如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录")]),t._v(" "),i("li",[i("code",[t._v("**")]),t._v(" 匹配多级目录，可在开始，中间，结束")]),t._v(" "),i("li",[i("code",[t._v("?")]),t._v(" 通用匹配单个字符")]),t._v(" "),i("li",[i("code",[t._v("[ ]")]),t._v(" 通用匹配单个字符列表")])]),t._v(" "),i("h2",{attrs:{id:"常用匹配示例"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#常用匹配示例"}},[t._v("#")]),t._v(" 常用匹配示例")]),t._v(" "),i("ul",[i("li",[t._v("bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件")]),t._v(" "),i("li",[t._v("/bin: 忽略根目录下的bin文件")]),t._v(" "),i("li",[t._v("/*.c: 忽略 cat.c，不忽略 build/cat.c")]),t._v(" "),i("li",[t._v("debug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj")]),t._v(" "),i("li",[t._v("**/foo: 忽略/foo, a/foo, a/b/foo等")]),t._v(" "),i("li",[t._v("a/**/b: 忽略a/b, a/x/b, a/x/y/b等")]),t._v(" "),i("li",[t._v("!/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件")]),t._v(" "),i("li",[t._v("*.log: 忽略所有 .log 文件")]),t._v(" "),i("li",[t._v("config.php: 忽略当前路径的 config.php 文件")])]),t._v(" "),i("h2",{attrs:{id:"gitignore规则不生效"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#gitignore规则不生效"}},[t._v("#")]),t._v(" .gitignore规则不生效")]),t._v(" "),i("p",[t._v(".gitignore 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改 .gitignore 是无效的。")]),t._v(" "),i("p",[t._v("解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:")]),t._v(" "),i("div",{staticClass:"language-sh extra-class"},[i("pre",{pre:!0,attrs:{class:"language-sh"}},[i("code",[i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--cached")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),i("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token string"}},[t._v("'update .gitignore'")]),t._v("\n")])])])])}),[],!1,null,null,null);i.default=v.exports}}]);